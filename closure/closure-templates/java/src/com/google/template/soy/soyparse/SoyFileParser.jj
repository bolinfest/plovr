/*
 * Copyright 2008 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
//
// JavaCC grammar specification for a Soy file.
//
// @author Kai Huang


// =================================================================================================
// Options
// =================================================================================================

options {
  JDK_VERSION = "1.7";
  STATIC = false;
  UNICODE_INPUT = true;
  DEBUG_TOKEN_MANAGER = false;
  DEBUG_PARSER = false;
  SUPPORT_CLASS_VISIBILITY_PUBLIC = false;
}


// =================================================================================================
// Parser class
// =================================================================================================


PARSER_BEGIN(SoyFileParser)

package com.google.template.soy.soyparse;

import com.google.common.annotations.VisibleForTesting;
import com.google.common.base.Preconditions;
import com.google.template.soy.base.SourceLocation;
import com.google.template.soy.base.SoySyntaxException;
import com.google.template.soy.base.internal.IdGenerator;
import com.google.template.soy.base.internal.SoyFileKind;
import com.google.template.soy.base.internal.SoyFileSupplier.Version;
import com.google.template.soy.error.ErrorReporter;
import com.google.template.soy.error.ErrorReporter.Checkpoint;
import com.google.template.soy.error.SoyError;
import com.google.template.soy.soytree.SoyFileNode;
import com.google.template.soy.soytree.NameAttributePair;
import com.google.template.soy.soytree.AliasDeclaration;
import com.google.template.soy.soytree.NamespaceDeclaration;
import com.google.template.soy.soytree.SoyNode.StandaloneNode;
import com.google.template.soy.soytree.TemplateBasicNodeBuilder;
import com.google.template.soy.soytree.TemplateDelegateNodeBuilder;
import com.google.template.soy.soytree.TemplateNode;
import com.google.template.soy.soytree.TemplateNodeBuilder;
import com.google.template.soy.soytree.TemplateNodeBuilder.DeclInfo;
import com.google.template.soy.soytree.TemplateNode.SoyFileHeaderInfo;
import com.google.template.soy.types.SoyTypeRegistry;

import java.io.*;
import java.util.*;
import java.util.regex.*;


/**
 * This parser's specification is in SoyFileParser.jj, which is read by JavaCC and transformed
 * into SoyFileParser.java. To modify this parser, please edit SoyFileParser.jj. Do not edit
 * SoyFileParser.java directly.
 *
 * <p> Important: Do not use outside of Soy code (treat as superpackage-private).
 *
 * <pre>
 * This parser parses the following Soy file structure:
 *
 * 1. Delegate package (delpackage):
 *    + Optional.
 *    + The file must contain 0 or 1 delpackage declaration.
 *    + It must appear before the namespace declaration.
 *    + It must appear on its own line and start at the start of a line.
 *    Example:  {delpackage MySecretFeature}
 *
 * 2. Namespace:
 *    + The file must contain exactly one namespace declaration.
 *    + It must appear before any templates.
 *    + It must appear on its own line and start at the start of a line.
 *    Examples:
 *    {namespace boo.foo}
 *    {namespace boo.foo autoescape="..."}
 *
 * 3. Alias:
 *    + Alias declarations must appear after the namespace declaration.
 *    + They must appear before any templates.
 *    + Each must appear on its own line and start at the start of a line.
 *    Examples:
 *    {alias boo.foo.goo.moo}
 *    {alias boo.foo.goo.moo as zoo}
 *
 * 4. SoyDoc:
 *    + Starts with slash-star-star (/**) and ends with star-slash (*&#47;) like JavaDoc.
 *    + SoyDoc must appear on its own line(s) and start at the start of a line.
 *    + Currently recognizes two tags: "&#64;param keyName" and "&#64;param? optionalKeyName".
 *    Example:
 *    /**
 *     * &#64;param boo Something scary.
 *     * &#64;param? goo Something slimy (optional).
 *     *&#47;
 *
 * 5. Template:
 *    + Each template must be immediately preceded by a SoyDoc block.
 *    + The 'template' tag and the '/template' tag much each appear on its own line(s) and start
 *      at the start of a line.
 *    + The template content is parsed by TemplateParser.jj.
 *    Examples:
 *    /**
 *     * New style.
 *     * &#64;param boo Something scary.
 *     * &#64;param? goo Something slimy (optional).
 *     *&#47;
 *    {template .foo autoescape="..."}
 *      {msg desc=""}
 *        {$boo} has a friend named {$goo.firstName}.
 *      {/msg}
 *    {/template}
 *
 * 6. Misc:
 *    + Other than the items specified above, everything else is ignored.
 *    + SoyDoc blocks not immediately followed by a template are ignored.
 *    + The file must end with a newline.
 * </pre>
 *
 * <p>TODO(lukes):  This parser has a lot of issues:
 * 1. This should be merged with the TemplateParser.  Currently this parser matches all template
 *    contents and passes them to TemplateParser.  This is probably not very performant (2 passes
 *    over each template body) and also neccesitates a lot of manual source location munging.
 * 2. Too much parsing logic is handled by the AST nodes with regular expressions.  This is probably
 *    slower than handling it in the parser and it leads to redundant error handling code.
 *
 */
public class SoyFileParser {


  /** Pattern for the line number in an error message generated by the parser or token manager. */
  private static final Pattern ERROR_MSG_LINE_NUM_PAT =
      Pattern.compile("(?<=line )\\d+(?=, column )");

  private static final SoyError UNCATEGORIZED = SoyError.of("In file {0}, template {1}: {2}");


  /** Type registry for resolving type names. */
  private SoyTypeRegistry typeRegistry;

  /** Node id generator for the tree being built. */
  private IdGenerator nodeIdGen;

  /** The kind of this Soy file. */
  private SoyFileKind soyFileKind;

  /** Path of source being parsed. This is descriptive, not a means to refetch source. */
  private String filePath;

  private ErrorReporter errorReporter;

  /**
   * Constructor that takes a reader object providing the input.
   * @param typeRegistry The type registry for resolving type names.
   * @param nodeIdGen The node id generator for the tree being built.
   * @param input The input to parse.
   * @param soyFileKind The kind of this Soy file.
   * @param filePath The path of the source being parsed. Used for reporting.
   * @param errorReporter For reporting parse errors.
   */
  public SoyFileParser(
      SoyTypeRegistry typeRegistry,
      IdGenerator nodeIdGen,
      Reader input,
      SoyFileKind soyFileKind,
      String filePath,
      ErrorReporter errorReporter) {
    this(input);
    Preconditions.checkNotNull(typeRegistry);
    Preconditions.checkNotNull(nodeIdGen);
    this.typeRegistry = typeRegistry;
    this.nodeIdGen = nodeIdGen;
    this.soyFileKind = soyFileKind;
    this.filePath = filePath;
    this.errorReporter = errorReporter;
  }

  /**
   * Attempts to parse the given input as a Soy file, returns null if parsing fails.
   */
  public SoyFileNode parseSoyFile() {
    Preconditions.checkNotNull(typeRegistry);
    Preconditions.checkNotNull(nodeIdGen);
    Checkpoint checkpoint = errorReporter.checkpoint();
    SoyFileNode soyFileNode = null;
    try {
      soyFileNode = SoyFile();
    } catch (ParseException e) {
      ParseErrors.reportSoyFileParseException(errorReporter, filePath, e);
    } catch (SoySyntaxException e) {
      ParseErrors.report(errorReporter, filePath, e);
    } catch (TokenMgrError e) {
      // This is only thrown by TemplateParser (and ExpressionParser) SoyFileParser never throws this
      ParseErrors.report(errorReporter, filePath, e);
    }
    // our callers expect us to return null when encountering parsing errors.
    if (errorReporter.errorsSince(checkpoint)) {
      return null;
    }
    return soyFileNode;
  }


  /**
   * Adjusts an error message generated by the template parser or template token manager so that the
   * line number is with respect to the Soy file instead of with respect to the template.
   * @param errorMsg Error message from a parser or token manager error.
   * @param templateTagLineNum The line number of the 'template' tag with respect to the Soy file.
   * @return The adjusted error message with the new line number, or the original error message if
   *     no line number is found in it.
   */
  @VisibleForTesting
  static String adjustLineNumInErrorMsg(String errorMsg, int templateTagLineNum) {

    Matcher matcher = ERROR_MSG_LINE_NUM_PAT.matcher(errorMsg);
    if (! matcher.find()) {
      // Can't find line number, so no adjustment.
      return errorMsg;
    }

    int newLineNum = templateTagLineNum + Integer.parseInt(matcher.group());
    return errorMsg.substring(0, matcher.start()) + newLineNum + errorMsg.substring(matcher.end());
  }

  private SourceLocation createSrcLoc(Token tok1, Token ...rest) {
    return Tokens.createSrcLoc(filePath, tok1, rest);
  }
}

PARSER_END(SoyFileParser)


// =================================================================================================
// Tokens
// =================================================================================================


TOKEN_MGR_DECLS:
{

  /** When inside a template, this field holds the command name ('template' or 'deltemplate'). */
  private String currTemplateCmdName = null;

}

// Tips on writing a good lexer
// https://javacc.java.net/doc/lexertips.html

// Skip whitespace and comments
SKIP : {
 " "
|  "\t"
|  "\n"
|  "\r"
|  <"//" (~["\n","\r"])* ("\n" | "\r" | "\r\n")?>
}

MORE: {
 "/*" : IN_MULTILINE_COMMENT
}

<IN_MULTILINE_COMMENT> MORE : {
  < ~[] >
}

<IN_MULTILINE_COMMENT> SKIP : {
  "*/" : DEFAULT
}


TOKEN : {
  <RBRACE : "}">
| <EQ : "=">
| <AS: "as">
| <ALIAS_OPEN: "{alias">
| <CSSBASE: "cssbase">
| <NAMESPACE_OPEN: "{namespace">
| <AUTOESCAPE: "autoescape">
| <REQUIRECSS: "requirecss">
| <DELPACKAGE_OPEN: "{delpackage">
| <ATTRIBUTE_VALUE:
    "\""
    (
     // TODO(lukes): we should probably have a way to escape double quotes within the attribute
     // value
      ~["\""]
    )*
    "\""
  >
| <#WS: " " | "\t" | "\n" | "\r" | "\r\n">
| <#IDENT: ["a"-"z","A"-"Z","_"] ( ["a"-"z","A"-"Z","_","0"-"9"] )*>
| <DOTTED_IDENT: <IDENT> ( (<WS>)* "." (<WS>)* <IDENT> )*>
}

// Templates
//
// Because our parser is split into SoyFileParser and TemplateParser we currently collect all
// content between the template open and template close and pass it to the template parser.  In
// the long run we should merge these parsers and get rid of these lexical states.
TOKEN : {
  < #TEMPLATE_OPEN_SUFFIX: (<WS>)+ ( ~["}"] )+ "}">
| <DELTEMPLATE_OPEN: "{deltemplate" <TEMPLATE_OPEN_SUFFIX>> : IN_DELTEMPLATE
| <TEMPLATE_OPEN: "{template" <TEMPLATE_OPEN_SUFFIX>> : IN_TEMPLATE
}

<IN_DELTEMPLATE,IN_TEMPLATE> MORE: {
  < ~[] >
}

<IN_TEMPLATE> TOKEN: {
  <TEMPLATE_CONTENT : "{/template}"> : DEFAULT
}

<IN_DELTEMPLATE> TOKEN: {
  <DELTEMPLATE_CONTENT : "{/deltemplate}"> : DEFAULT
}

// SOYDOC
// Capture all soydoc into a SPECIAL_TOKEN.
// SPECIAL_TOKEN (http://www.engr.mun.ca/~theo/JavaCC-FAQ/javacc-faq-moz.htm#tth_sEc3.10)
// is a special javacc mechanism whereby we can create a 'token' that isn't directly passed to the
// parser. Normally, the stream of text gets turned into a stream of 'tokens' that then get matched
// by the parser.  A SPECIAL_TOKEN is just like a normal token, except it is not directly passed to
// the parser.  Instead, SPECIAL_TOKENs can be accessed via the normal tokens that immediately
// follow them via the Token.specialToken field.
// This behavior is useful for matching SoyDoc since we are really only interested in soydoc that
// immediately precedes template definitions.  We could theoretically handle this by creating non
// terminal for matching soydoc and then writing a BNF expression for it.  However, then we would
// have to write BNF expressions to match (and ignore) soydoc in all other contexts, which would be
// tedious.

MORE : {
   "/**" : IN_SOYDOC
}

<IN_SOYDOC> MORE : {
  < ~[] >
}

<IN_SOYDOC> SPECIAL_TOKEN : {
  <SOYDOC: "*/" > : DEFAULT
}

// Match everything else as an 'unexpected' token to prevent TokenMgrErrors from being thrown and
// instead this will get turned into ParseExceptions which have more debugging information.
TOKEN : {
    < UNEXPECTED_TOKEN : ~[] >
}

// =================================================================================================
// Grammar
// =================================================================================================


/**
 * Matches the whole input if it is a valid Soy file.
 *
 * SoyFile -> [ DelpackageTag ] [ NamespaceTag ] ( AliasTag )* ( Template )* EOF
 */
private SoyFileNode SoyFile() :
{
  TemplateNode template;
  String delpackageName = null;
  NamespaceDeclaration namespace = NamespaceDeclaration.NULL;
  List<TemplateNode> templates = new ArrayList<TemplateNode>();
  List<AliasDeclaration> aliases = new ArrayList<AliasDeclaration>();
  AliasDeclaration alias = null;
  // note we generate the id first to avoid having to edit every test that asserts on node ids.
  int id = nodeIdGen.genId();
}
{
  [ delpackageName = DelPackage() ]

  [ namespace = Namespace() ]

  (
    alias = Alias()
    { aliases.add(alias); }
  )*

  { SoyFileHeaderInfo soyFileHeaderInfo = new SoyFileHeaderInfo(delpackageName, namespace); }

  (
    template = Template(soyFileHeaderInfo)
    { templates.add(template); }
  )*

  <EOF>

  {
    SoyFileNode sfn =
        new SoyFileNode(
            id,
            filePath,
            soyFileKind,
            errorReporter,
            delpackageName,
            namespace,
            aliases);
    sfn.addChildren(templates);
    return sfn;
  }
}

/**
 * Matches an {alias ...} declaration.
 */
private AliasDeclaration Alias() :
{
  Token open, namespace, close;
  Token alias = null, as = null;
}
{
  (
    open = <ALIAS_OPEN>
    namespace = <DOTTED_IDENT>
    [
      as = <AS>
      alias = <DOTTED_IDENT>
    ]
    close = <RBRACE>
  )
  {
    return alias == null
        ? new AliasDeclaration(
            namespace.image,
            errorReporter,
            createSrcLoc(open, namespace, close))
        : new AliasDeclaration(
            namespace.image,
            alias.image,
            errorReporter,
            createSrcLoc(open, namespace, as, alias, close));
  }
}

/**
 * Matches a {namespace ...} declaration.
 */
private NamespaceDeclaration Namespace() :
{
  Token open, name, close;
  NameAttributePair attr;
  List<NameAttributePair> attributes = new ArrayList<NameAttributePair>();
}
{
  open = <NAMESPACE_OPEN>
  name = <DOTTED_IDENT>
  (
    attr = Attribute()
    { attributes.add(attr); }
  )*
  close = <RBRACE>
  {
    return new NamespaceDeclaration(name.image, attributes, errorReporter);
  }
}

/**
 * Matches a name value pair.
 *
 * <p>Currently this is hardcoded to handle a fixed set of keys, which means
 * adding a new attribute will require a parser change.  Alternatively, we could
 * match all possible keys and figure out if they were appropriate later.
 * 'Hardcoding' the keys is pretty easy for now and will allow the tokenizer to
 * issue reasonable error messages.
 */
private NameAttributePair Attribute() :
{
  Token name;
  Token eq;
  Token value;
}
{
  (
      name = <AUTOESCAPE>
    | name = <REQUIRECSS>
    | name = <CSSBASE>
  )
  eq = <EQ>
  value = <ATTRIBUTE_VALUE>
  {
    return new NameAttributePair(
        name.image,
        // trim quotes off the token
        value.image.substring(1, value.image.length() - 1),
        createSrcLoc(name, eq, value));
  }
}

/**
 * Matches a {delpackage ...} declaration.
 *
 * <p>Currently this just returns the parsed name, we should consider returning
 * some object with source location information.
 */
private String DelPackage() :
{
  Token name;
}
{
  <DELPACKAGE_OPEN>
  name = <DOTTED_IDENT>
  <RBRACE>
  {
    return name.image;
  }
}


/**
 * Template -> AnyTemplateTag TemplateContent
 * @param soyFileHeaderInfo Info from the containing Soy file's header declarations. Needed by the
 *     TemplateNode constructors.
 */
private TemplateNode Template(SoyFileHeaderInfo soyFileHeaderInfo) :
{
  Token open, templateContent, close;
  boolean isBasicTemplate;
}
{

  (
      (
        open = <TEMPLATE_OPEN>
        templateContent = <TEMPLATE_CONTENT>
        { isBasicTemplate = true; }
      )
    | (
        open = <DELTEMPLATE_OPEN>
        templateContent = <DELTEMPLATE_CONTENT>
        { isBasicTemplate = false; }
      )
  )

  { SourceLocation srcLocation = createSrcLoc(open, templateContent);

    TemplateNodeBuilder templateNodeBuilder = isBasicTemplate
        ? new TemplateBasicNodeBuilder(
            soyFileHeaderInfo, srcLocation, errorReporter, typeRegistry)
        : new TemplateDelegateNodeBuilder(
            soyFileHeaderInfo, srcLocation, errorReporter, typeRegistry);

    templateNodeBuilder.setId(nodeIdGen.genId());

    // --- Set the command text. ---
    // trim the leading tag name and the trailing '}'
    String cmdText =
        open.image.substring(isBasicTemplate ? 10 : 13, open.image.length() - 1);
    templateNodeBuilder.setCmdText(cmdText);

    // --- Set the SoyDoc. ---
    // special tokens are accessible from the non-special tokens that come after them.
    Token soyDoc = open.specialToken;
    if (soyDoc != null && soyDoc.kind == SOYDOC) {
      templateNodeBuilder.setSoyDoc(soyDoc.image);
    } else {
      templateNodeBuilder.setSoyDoc(null);
    }

    List<DeclInfo> templateHeaderDecls = null;
    List<StandaloneNode> templateBodyNodes = null;
    // trim the close template tag.
    String templateBodyContent =
        templateContent.image.substring(0, templateContent.image.lastIndexOf("{"));
    try {
      TemplateParseResult result = new TemplateParser(
            nodeIdGen,
            templateBodyContent,
            filePath,
            templateContent.beginLine,
            templateContent.beginColumn,
            errorReporter)
            .parseTemplateContent();
      templateHeaderDecls = result.getHeaderDecls();
      templateBodyNodes = result.getBodyNodes();
    } catch (TokenMgrError tme) {
      String adjustedErrorMsg = adjustLineNumInErrorMsg(tme.getMessage(), open.beginLine);
      errorReporter.report(
          SourceLocation.UNKNOWN,
          UNCATEGORIZED,
          filePath,
          templateNodeBuilder.getTemplateNameForUserMsgs(),
          adjustedErrorMsg);
    } catch (ParseException pe) {
      String adjustedErrorMsg = adjustLineNumInErrorMsg(pe.getMessage(), open.beginLine);
      errorReporter.report(
          SourceLocation.UNKNOWN,
          UNCATEGORIZED,
          filePath,
          templateNodeBuilder.getTemplateNameForUserMsgs(),
          adjustedErrorMsg);
    } catch (SoySyntaxException sse) {
      errorReporter.report(
          SourceLocation.UNKNOWN,
          UNCATEGORIZED,
          filePath,
          templateNodeBuilder.getTemplateNameForUserMsgs(),
          sse.getMessage());
    }
  }

  { if (templateHeaderDecls != null) {
      templateNodeBuilder.setHeaderDecls(templateHeaderDecls);
    }
    TemplateNode templateNode = templateNodeBuilder.build();
    if (templateBodyNodes != null) {
        templateNode.addChildren(templateBodyNodes);
    }
    return templateNode;
  }
}
