<project name="closure-stylesheets"
         default="jar"
         xmlns:artifact="antlib:org.apache.maven.artifact.ant">

  <property name="src.dir"           value="${basedir}/src" />
  <property name="tests.dir"         value="${basedir}/tests" />
  <property name="lib.dir"           value="${basedir}/lib" />
  <property name="tools.dir"         value="${basedir}/tools" />
  <property name="build.dir"         value="${basedir}/build" />
  <property name="genfiles.dir"      value="${build.dir}/genfiles" />
  <property name="java-genfiles.dir" value="${genfiles.dir}/java" />
  <property name="classes.dir"       value="${build.dir}/classes" />
  <property name="compiler-jarfile"
            value="${build.dir}/${ant.project.name}.jar" />
  <property name="compiler-jarfile-library"
            value="${build.dir}/${ant.project.name}-library.jar" />
  <property name="testClasses.dir"   value="${build.dir}/test" />
  <property name="javadoc.dir"       value="${build.dir}/javadoc" />
  <property name="includeDebugInfo"  value="true" />

  <presetdef name="css.javac">
    <javac debug="${includeDebugInfo}"
           encoding="UTF-8"
           includeAntRuntime="false" />
  </presetdef>

  <path id="classpath.path">
    <fileset dir="${lib.dir}">
      <include name="*.jar" />
    </fileset>
  </path>

  <target name="clean"
          description="removes all generated files">
    <delete dir="${build.dir}" />
  </target>

  <target name="javacc">
    <mkdir dir="${java-genfiles.dir}/com/google/common/css/compiler/ast" />
    <javacc target="${src.dir}/com/google/common/css/compiler/ast/GssParserCC.jj"
            javacchome="${lib.dir}"
            outputdirectory="${java-genfiles.dir}/com/google/common/css/compiler/ast" />
  </target>

  <target name="compile"
          depends="javacc"
          description="compiles Java files for the CSS compiler library">
    <mkdir dir="${classes.dir}" />
    <css.javac srcdir="${src.dir}:${java-genfiles.dir}"
           destdir="${classes.dir}"
           includeAntRuntime="false"
           debug="${includeDebugInfo}">
      <classpath refid="classpath.path" />
    </css.javac>
  </target>

  <target name="yyyymmdd">
    <exec outputproperty="build.yyyymmdd"
          executable="date"
          failonerror="true"
          failifexecutionfails="true"
          dir="${basedir}">
      <arg value="+%Y%m%d" />
    </exec>
  </target>

  <target name="jar"
          depends="compile, yyyymmdd"
          description="packages the class files as a jar">
    <jar destfile="${compiler-jarfile}" update="true">
      <fileset dir="${classes.dir}" />
      <!--
      Include all dependent jars so this can be run using:
      java -jar build/closure-stylesheets.jar -o output.css input.css...
      -->
      <zipgroupfileset dir="${lib.dir}">
        <include name="args4j*.jar" />
        <include name="gson*.jar" />
        <include name="guava*.jar" />
        <include name="truth*.jar" />
        <include name="jsr305.jar" />
        <!-- libsourcemap.jar is generated inside google's internal code base. -->
        <include name="libsourcemap.jar" />
      </zipgroupfileset>
      <manifest>
        <attribute name="Main-Class"
                   value="com.google.common.css.compiler.commandline.ClosureCommandLineCompiler" />
      </manifest>
    </jar>
  </target>

  <target name="library-jar"
          depends="compile, yyyymmdd"
          description="Build a version without bundling any dependencies">
    <jar destfile="${compiler-jarfile-library}" update="true">
      <fileset dir="${classes.dir}" />
    </jar>
  </target>

  <target name="release-jar"
          depends="jar, yyyymmdd"
          description="Builds a release that should be uploaded to http://code.google.com/p/closure-stylesheets/downloads/list">
    <copy file="${compiler-jarfile}"
          tofile="${build.dir}/closure-stylesheets-${build.yyyymmdd}.jar" />
  </target>

  <target name="release-library-jar"
          depends="jar, yyyymmdd"
          description="Builds a library jar">
    <copy file="${compiler-jarfile-library}"
          tofile="${build.dir}/closure-stylesheets-library-${build.yyyymmdd}.jar" />
  </target>

  <target name="compile-tests"
          depends="compile"
          description="compile the JUnit tests">
    <mkdir dir="${testClasses.dir}" />
    <css.javac srcdir="${tests.dir}"
           destdir="${testClasses.dir}">
      <classpath refid="classpath.path" />
      <classpath>
        <pathelement location="${classes.dir}" />
      </classpath>
    </css.javac>
  </target>

  <macrodef name="testing">
    <attribute name="printsummary" default="off" />
    <attribute name="fork" default="off" />
    <attribute name="forkmode" default="perTest" />
    <sequential>
      <antcall target="compile-tests" />
      <junit printsummary="@{printsummary}"
             fork="@{fork}"
             forkmode="@{forkmode}"
             showoutput="true">
        <classpath refid="classpath.path" />
        <classpath>
          <pathelement location="${classes.dir}" />
          <pathelement location="${testClasses.dir}" />
        </classpath>
        <formatter type="plain" usefile="false" />
        <batchtest haltonfailure="true">
          <fileset dir="${testClasses.dir}">
            <include name="**/*Test.class" />
            <!-- Unfortunately, JUnit does not ignore abstract classes on its own. -->
            <exclude name="com/google/common/css/compiler/passes/AbstractCompactPrinterTest.class" />
          </fileset>
        </batchtest>
      </junit>
    </sequential>
  </macrodef>

  <target name="test"
          description="runs all of the tests">
    <testing printsummary="on" fork="on" forkmode="once" />
  </target>

  <target name="test-forkless"
          description="runs all of the tests without forking the process">
    <testing />
  </target>

  <target name="javadoc"
          depends="javacc"
          description="Generates Javadoc for the project's source code.">
    <mkdir dir="${javadoc.dir}" />
    <javadoc destdir="${javadoc.dir}"
             author="false"
             protected="true"
             windowtitle="Closure Stylesheets"
             additionalparam=" -notimestamp"
             >
      <sourcepath>
        <pathelement location="${src.dir}" />
        <pathelement location="${java-genfiles.dir}" />
      </sourcepath>
      <classpath refid="classpath.path" />
      <link href="http://java.sun.com/javase/6/docs/api/" />
    </javadoc>
  </target>

  <target name="all"
          depends="compile,jar,compile-tests,test,javadoc"
          description="build all deliverables for the project"
          />

  <!-- MAVEN -->

  <!-- Ant tasks -->
  <path id="maven-ant-tasks.classpath"
        path="${tools.dir}/maven-ant-tasks-2.1.3.jar" />
  <typedef resource="org/apache/maven/artifact/ant/antlib.xml"
           uri="antlib:org.apache.maven.artifact.ant"
           classpathref="maven-ant-tasks.classpath" />

  <property name="mvn.build.dir" value="${build.dir}/maven" />

  <!-- Generated pom.xml -->
  <property name="pom.xml" value="${mvn.build.dir}/pom.xml" />


  <!-- The following server is used to deploy releases to maven central via
       Sonatypes publishing service which runs on oss.sonatype.org.

       You will need to have an account on sonatype.org to push releases. You
       can override these values if you want to deploy to a different
       repository.
  -->
  <property name="maven-repository-url"
            value="https://oss.sonatype.org/service/local/staging/deploy/maven2/" />
  <property name="maven-repository-id" value="sonatype-nexus-staging" />

  <target name="pom" depends="yyyymmdd">
    <dirname property="pom.xml.dir" file="${pom.xml}" />
    <mkdir dir="${pom.xml.dir}" />
    <copy file="${basedir}/pom.template.xml"
          tofile="${pom.xml}">
      <filterset>
        <filter token="build.yyyymmdd" value="${build.yyyymmdd}" />
      </filterset>
    </copy>

    <artifact:pom id="project" file="${pom.xml}" />
  </target>

  <target name="mvn-install"
          depends="pom, compile, javadoc">
    <mkdir dir="${mvn.build.dir}" />

    <property name="mvn-nodeps.jar"
              value="${mvn.build.dir}/${ant.project.name}-${build.yyyymmdd}.jar"
              />
    <jar destfile="${mvn-nodeps.jar}" update="true">
      <fileset dir="${classes.dir}" />
    </jar>

    <property name="mvn-sources.jar"
              value="${mvn.build.dir}/${ant.project.name}-${build.yyyymmdd}-sources.jar"
              />
    <jar destfile="${mvn-sources.jar}" update="true">
      <fileset dir="${src.dir}" />
      <fileset dir="${java-genfiles.dir}" />
    </jar>

    <property name="mvn-javadoc.jar"
              value="${mvn.build.dir}/${ant.project.name}-${build.yyyymmdd}-javadoc.jar"
              />
    <jar destfile="${mvn-javadoc.jar}" update="true">
      <fileset dir="${javadoc.dir}" />
    </jar>

    <artifact:install file="${mvn-nodeps.jar}">
      <pom refid="project" />
      <attach file="${mvn-sources.jar}" classifier="sources" />
      <attach file="${mvn-javadoc.jar}" classifier="javadoc" />
    </artifact:install>
  </target>

  <target name="mvn-deploy"
    depends="mvn-install"
    description="Signs and deploys Closure Stylesheets artifacts to the central Maven repository.">

    <!-- Sign and deploy the main artifact. -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.1:sign-and-deploy-file" />
      <arg value="-Durl=${maven-repository-url}" />
      <arg value="-DrepositoryId=${maven-repository-id}" />
      <arg value="-DpomFile=${pom.xml}" />
      <arg value="-Dfile=${mvn-nodeps.jar}" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- Sign and deploy the sources artifact. -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.1:sign-and-deploy-file" />
      <arg value="-Durl=${maven-repository-url}" />
      <arg value="-DrepositoryId=${maven-repository-id}" />
      <arg value="-DpomFile=${pom.xml}" />
      <arg value="-Dfile=${mvn-sources.jar}" />
      <arg value="-Dclassifier=sources" />
      <arg value="-Pgpg" />
    </artifact:mvn>

    <!-- Sign and deploy the javadoc artifact. -->
    <artifact:mvn>
      <arg value="org.apache.maven.plugins:maven-gpg-plugin:1.1:sign-and-deploy-file" />
      <arg value="-Durl=${maven-repository-url}" />
      <arg value="-DrepositoryId=${maven-repository-id}" />
      <arg value="-DpomFile=${pom.xml}" />
      <arg value="-Dfile=${mvn-javadoc.jar}" />
      <arg value="-Dclassifier=javadoc" />
      <arg value="-Pgpg" />
    </artifact:mvn>
  </target>

</project>
